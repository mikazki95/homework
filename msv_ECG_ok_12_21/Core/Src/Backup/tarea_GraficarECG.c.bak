/*
 * tarea_GraficarECG.c
 *
 *  Created on: May 23, 2023
 *      Author: Tonatiuh Velazquez Rojas.
 */
#include "FreeRTOS.h"
#include "main.h"
#include <cmsis_os.h>
#include <arm_math.h>
#include "ads1298.h"
#include "tarea_GraficarECG.h"

//Para despertar la tarea de calcular la frecuencia cardiaca
//extern osThreadId calcularFrecuenciaCardiacaHandle;

const char versionGraficarECG[] = LIB_VERSION_GRAFICARECG;

// Valores leídos del ADS (origen: tarea0)
extern float32_t ads_I_f;
extern float32_t ads_II_f;
extern float32_t ads_III_f;
// Derivaciones a graficar (Origen: tarea2)
extern ecg_Graficas_s derivacionesAGraficar;

//Globales
//extern bool flag_ECG_RDY;
//extern float32_t graph1;
//extern float32_t graph2;
float32_t graph1;
float32_t graph2;

extern osMessageQId ecgGraph1Handle;
extern osMessageQId ecgGraph2Handle;

//Variables intermedias para calcular el valor a graficar
float32_t g1_Derivacion1;
float32_t g2_Derivacion2;
bool omitirMuestra = false; //Variable para omitir 1 muestra y bajar el envio USB a 250 sps

//Filtros ECG 2 filtros Diagnóstico y 2 filtros Monitor
arm_fir_instance_f32 filtroDiag1_Instancia; // Instancia del filtro
arm_fir_instance_f32 filtroMoni1_Instancia; // Instancia del filtro
arm_fir_instance_f32 filtroMaxi1_Instancia; // Instancia del filtro
arm_fir_instance_f32 filtro60Hz1_Instancia; // Instancia del filtro

arm_fir_instance_f32 filtroDiag2_Instancia; // Instancia del filtro
arm_fir_instance_f32 filtroMoni2_Instancia; // Instancia del filtro
arm_fir_instance_f32 filtroMaxi2_Instancia; // Instancia del filtro
arm_fir_instance_f32 filtro60Hz2_Instancia; // Instancia del filtro

float32_t filtroDiag1_Estados[FILTRO_ECG_TAM_BLOQUE + FILTRO_ECG_ORDEN - 1];
float32_t filtroMoni1_Estados[FILTRO_ECG_TAM_BLOQUE + FILTRO_ECG_ORDEN - 1];
float32_t filtroMaxi1_Estados[FILTRO_ECG_TAM_BLOQUE + FILTRO_ECG_ORDEN - 1];
float32_t filtro60Hz1_Estados[FILTRO_ECG_TAM_BLOQUE + FILTRO_ECG_ORDEN - 1];

float32_t filtroDiag2_Estados[FILTRO_ECG_TAM_BLOQUE + FILTRO_ECG_ORDEN - 1];
float32_t filtroMoni2_Estados[FILTRO_ECG_TAM_BLOQUE + FILTRO_ECG_ORDEN - 1];
float32_t filtroMaxi2_Estados[FILTRO_ECG_TAM_BLOQUE + FILTRO_ECG_ORDEN - 1];
float32_t filtro60Hz2_Estados[FILTRO_ECG_TAM_BLOQUE + FILTRO_ECG_ORDEN - 1];

float32_t filtroDiag1_Coeficientes[FILTRO_ECG_ORDEN] = //0.05 | 150Hz
        {
                0.0002667400f, -0.0003751600f, -0.0002579700f, 0.0003544900f, -0.0001729100f, -0.0005342600f, 0.0002961400f, 0.0001554800f, -0.0007564400f, -0.0000006632f, 0.0005678800f, -0.0007607600f, -0.0005872100f, 0.0008805200f, -0.0003592900f, -0.0013466000f, 0.0007842000f, 0.0004997800f, -0.0019286000f, -0.0000009508f, 0.0015700000f, -0.0018406000f, -0.0014847000f, 0.0022763000f, -0.0007096800f, -0.0032202000f, 0.0019065000f, 0.0013912000f, -0.0043304000f, -0.0000010216f, 0.0037421000f, -0.0038264000f, -0.0032382000f, 0.0050803000f, -0.0011416000f, -0.0067175000f, 0.0040686000f, 0.0033447000f, -0.0086684000f, -0.0000007665f, 0.0080829000f, -0.0072723000f, -0.0065575000f, 0.0106370000f, -0.0015529000f, -0.0134880000f, 0.0084715000f, 0.0078252000f, -0.0174480000f, -0.0000003497f, 0.0181940000f, -0.0146790000f, -0.0145390000f, 0.0250640000f, -0.0018464000f, -0.0327730000f, 0.0223740000f, 0.0242770000f, -0.0506860000f, -0.0000000435f, 0.0737220000f, -0.0637950000f, -0.0935040000f, 0.3018200000f, 0.5979100000f, 0.3018200000f, -0.0935040000f, -0.0637950000f, 0.0737220000f, -0.0000000435f, -0.0506860000f, 0.0242770000f, 0.0223740000f, -0.0327730000f, -0.0018464000f, 0.0250640000f, -0.0145390000f, -0.0146790000f, 0.0181940000f, -0.0000003497f, -0.0174480000f, 0.0078252000f, 0.0084715000f, -0.0134880000f, -0.0015529000f, 0.0106370000f, -0.0065575000f, -0.0072723000f, 0.0080829000f, -0.0000007665f, -0.0086684000f, 0.0033447000f, 0.0040686000f, -0.0067175000f, -0.0011416000f, 0.0050803000f, -0.0032382000f, -0.0038264000f, 0.0037421000f, -0.0000010216f, -0.0043304000f, 0.0013912000f, 0.0019065000f, -0.0032202000f, -0.0007096800f, 0.0022763000f, -0.0014847000f, -0.0018406000f, 0.0015700000f, -0.0000009508f, -0.0019286000f, 0.0004997800f, 0.0007842000f, -0.0013466000f, -0.0003592900f, 0.0008805200f, -0.0005872100f, -0.0007607600f, 0.0005678800f, -0.0000006632f, -0.0007564400f, 0.0001554800f, 0.0002961400f, -0.0005342600f, -0.0001729100f, 0.0003544900f, -0.0002579700f, -0.0003751600f, 0.0002667400f
        };
float32_t filtroDiag2_Coeficientes[FILTRO_ECG_ORDEN] = //0.05 | 150Hz
        {
                0.0002667400f, -0.0003751600f, -0.0002579700f, 0.0003544900f, -0.0001729100f, -0.0005342600f, 0.0002961400f, 0.0001554800f, -0.0007564400f, -0.0000006632f, 0.0005678800f, -0.0007607600f, -0.0005872100f, 0.0008805200f, -0.0003592900f, -0.0013466000f, 0.0007842000f, 0.0004997800f, -0.0019286000f, -0.0000009508f, 0.0015700000f, -0.0018406000f, -0.0014847000f, 0.0022763000f, -0.0007096800f, -0.0032202000f, 0.0019065000f, 0.0013912000f, -0.0043304000f, -0.0000010216f, 0.0037421000f, -0.0038264000f, -0.0032382000f, 0.0050803000f, -0.0011416000f, -0.0067175000f, 0.0040686000f, 0.0033447000f, -0.0086684000f, -0.0000007665f, 0.0080829000f, -0.0072723000f, -0.0065575000f, 0.0106370000f, -0.0015529000f, -0.0134880000f, 0.0084715000f, 0.0078252000f, -0.0174480000f, -0.0000003497f, 0.0181940000f, -0.0146790000f, -0.0145390000f, 0.0250640000f, -0.0018464000f, -0.0327730000f, 0.0223740000f, 0.0242770000f, -0.0506860000f, -0.0000000435f, 0.0737220000f, -0.0637950000f, -0.0935040000f, 0.3018200000f, 0.5979100000f, 0.3018200000f, -0.0935040000f, -0.0637950000f, 0.0737220000f, -0.0000000435f, -0.0506860000f, 0.0242770000f, 0.0223740000f, -0.0327730000f, -0.0018464000f, 0.0250640000f, -0.0145390000f, -0.0146790000f, 0.0181940000f, -0.0000003497f, -0.0174480000f, 0.0078252000f, 0.0084715000f, -0.0134880000f, -0.0015529000f, 0.0106370000f, -0.0065575000f, -0.0072723000f, 0.0080829000f, -0.0000007665f, -0.0086684000f, 0.0033447000f, 0.0040686000f, -0.0067175000f, -0.0011416000f, 0.0050803000f, -0.0032382000f, -0.0038264000f, 0.0037421000f, -0.0000010216f, -0.0043304000f, 0.0013912000f, 0.0019065000f, -0.0032202000f, -0.0007096800f, 0.0022763000f, -0.0014847000f, -0.0018406000f, 0.0015700000f, -0.0000009508f, -0.0019286000f, 0.0004997800f, 0.0007842000f, -0.0013466000f, -0.0003592900f, 0.0008805200f, -0.0005872100f, -0.0007607600f, 0.0005678800f, -0.0000006632f, -0.0007564400f, 0.0001554800f, 0.0002961400f, -0.0005342600f, -0.0001729100f, 0.0003544900f, -0.0002579700f, -0.0003751600f, 0.0002667400f
        };

float32_t filtroMoni1_Coeficientes[FILTRO_ECG_ORDEN] = //0.3 | 40Hz
        {
                0.0001326000f, -0.0000547080f, -0.0002601700f, -0.0004408000f, -0.0005534900f, -0.0005629300f, -0.0004507600f, -0.0002241900f, 0.0000790270f, 0.0003922400f, 0.0006303500f, 0.0007087800f, 0.0005675900f, 0.0001947900f, -0.0003586500f, -0.0009790600f, -0.0015090000f, -0.0017834000f, -0.0016761000f, -0.0011445000f, -0.0002585800f, 0.0007970400f, 0.0017541000f, 0.0023221000f, 0.0022663000f, 0.0014849000f, 0.0000609200f, -0.0017298000f, -0.0034632000f, -0.0046606000f, -0.0049128000f, -0.0040043000f, -0.0020032000f, 0.0007142600f, 0.0035185000f, 0.0056604000f, 0.0064558000f, 0.0054807000f, 0.0027227000f, -0.0013543000f, -0.0058651000f, -0.0096766000f, -0.0116720000f, -0.0110460000f, -0.0075658000f, -0.0017106000f, 0.0053411000f, 0.0119120000f, 0.0161770000f, 0.0166070000f, 0.0123950000f, 0.0037797000f, -0.0078420000f, -0.0200480000f, -0.0297770000f, -0.0338990000f, -0.0298700000f, -0.0163270000f, 0.0064984000f, 0.0366570000f, 0.0706940000f, 0.1041600000f, 0.1323700000f, 0.1511900000f, 0.1578000000f, 0.1511900000f, 0.1323700000f, 0.1041600000f, 0.0706940000f, 0.0366570000f, 0.0064984000f, -0.0163270000f, -0.0298700000f, -0.0338990000f, -0.0297770000f, -0.0200480000f, -0.0078420000f, 0.0037797000f, 0.0123950000f, 0.0166070000f, 0.0161770000f, 0.0119120000f, 0.0053411000f, -0.0017106000f, -0.0075658000f, -0.0110460000f, -0.0116720000f, -0.0096766000f, -0.0058651000f, -0.0013543000f, 0.0027227000f, 0.0054807000f, 0.0064558000f, 0.0056604000f, 0.0035185000f, 0.0007142600f, -0.0020032000f, -0.0040043000f, -0.0049128000f, -0.0046606000f, -0.0034632000f, -0.0017298000f, 0.0000609200f, 0.0014849000f, 0.0022663000f, 0.0023221000f, 0.0017541000f, 0.0007970400f, -0.0002585800f, -0.0011445000f, -0.0016761000f, -0.0017834000f, -0.0015090000f, -0.0009790600f, -0.0003586500f, 0.0001947900f, 0.0005675900f, 0.0007087800f, 0.0006303500f, 0.0003922400f, 0.0000790270f, -0.0002241900f, -0.0004507600f, -0.0005629300f, -0.0005534900f, -0.0004408000f, -0.0002601700f, -0.0000547080f, 0.0001326000f
        };

float32_t filtroMoni2_Coeficientes[FILTRO_ECG_ORDEN] = //0.3 | 40Hz
        {
                0.0001326000f, -0.0000547080f, -0.0002601700f, -0.0004408000f, -0.0005534900f, -0.0005629300f, -0.0004507600f, -0.0002241900f, 0.0000790270f, 0.0003922400f, 0.0006303500f, 0.0007087800f, 0.0005675900f, 0.0001947900f, -0.0003586500f, -0.0009790600f, -0.0015090000f, -0.0017834000f, -0.0016761000f, -0.0011445000f, -0.0002585800f, 0.0007970400f, 0.0017541000f, 0.0023221000f, 0.0022663000f, 0.0014849000f, 0.0000609200f, -0.0017298000f, -0.0034632000f, -0.0046606000f, -0.0049128000f, -0.0040043000f, -0.0020032000f, 0.0007142600f, 0.0035185000f, 0.0056604000f, 0.0064558000f, 0.0054807000f, 0.0027227000f, -0.0013543000f, -0.0058651000f, -0.0096766000f, -0.0116720000f, -0.0110460000f, -0.0075658000f, -0.0017106000f, 0.0053411000f, 0.0119120000f, 0.0161770000f, 0.0166070000f, 0.0123950000f, 0.0037797000f, -0.0078420000f, -0.0200480000f, -0.0297770000f, -0.0338990000f, -0.0298700000f, -0.0163270000f, 0.0064984000f, 0.0366570000f, 0.0706940000f, 0.1041600000f, 0.1323700000f, 0.1511900000f, 0.1578000000f, 0.1511900000f, 0.1323700000f, 0.1041600000f, 0.0706940000f, 0.0366570000f, 0.0064984000f, -0.0163270000f, -0.0298700000f, -0.0338990000f, -0.0297770000f, -0.0200480000f, -0.0078420000f, 0.0037797000f, 0.0123950000f, 0.0166070000f, 0.0161770000f, 0.0119120000f, 0.0053411000f, -0.0017106000f, -0.0075658000f, -0.0110460000f, -0.0116720000f, -0.0096766000f, -0.0058651000f, -0.0013543000f, 0.0027227000f, 0.0054807000f, 0.0064558000f, 0.0056604000f, 0.0035185000f, 0.0007142600f, -0.0020032000f, -0.0040043000f, -0.0049128000f, -0.0046606000f, -0.0034632000f, -0.0017298000f, 0.0000609200f, 0.0014849000f, 0.0022663000f, 0.0023221000f, 0.0017541000f, 0.0007970400f, -0.0002585800f, -0.0011445000f, -0.0016761000f, -0.0017834000f, -0.0015090000f, -0.0009790600f, -0.0003586500f, 0.0001947900f, 0.0005675900f, 0.0007087800f, 0.0006303500f, 0.0003922400f, 0.0000790270f, -0.0002241900f, -0.0004507600f, -0.0005629300f, -0.0005534900f, -0.0004408000f, -0.0002601700f, -0.0000547080f, 0.0001326000f
        };

float32_t filtroMaxi1_Coeficientes[FILTRO_ECG_ORDEN] = //1 | 18Hz
        {
                0.0001644100f, 0.0001743100f, 0.0001664000f, 0.0001388700f, 0.0000893060f, 0.0000150330f, -0.0000864590f, -0.0002169600f, -0.0003769400f, -0.0005649500f, -0.0007770900f, -0.0010066000f, -0.0012439000f, -0.0014763000f, -0.0016887000f, -0.0018643000f, -0.0019854000f, -0.0020347000f, -0.0019970000f, -0.0018603000f, -0.0016177000f, -0.0012684000f, -0.0008193100f, -0.0002854400f, 0.0003097200f, 0.0009344900f, 0.0015499000f, 0.0021111000f, 0.0025697000f, 0.0028763000f, 0.0029835000f, 0.0028493000f, 0.0024405000f, 0.0017357000f, 0.0007286200f, -0.0005697300f, -0.0021295000f, -0.0039011000f, -0.0058158000f, -0.0077869000f, -0.0097123000f, -0.0114780000f, -0.0129640000f, -0.0140460000f, -0.0146060000f, -0.0145350000f, -0.0137410000f, -0.0121520000f, -0.0097232000f, -0.0064425000f, -0.0023294000f, 0.0025612000f, 0.0081398000f, 0.0142840000f, 0.0208430000f, 0.0276400000f, 0.0344820000f, 0.0411640000f, 0.0474800000f, 0.0532260000f, 0.0582170000f, 0.0622850000f, 0.0652940000f, 0.0671420000f, 0.0677650000f, 0.0671420000f, 0.0652940000f, 0.0622850000f, 0.0582170000f, 0.0532260000f, 0.0474800000f, 0.0411640000f, 0.0344820000f, 0.0276400000f, 0.0208430000f, 0.0142840000f, 0.0081398000f, 0.0025612000f, -0.0023294000f, -0.0064425000f, -0.0097232000f, -0.0121520000f, -0.0137410000f, -0.0145350000f, -0.0146060000f, -0.0140460000f, -0.0129640000f, -0.0114780000f, -0.0097123000f, -0.0077869000f, -0.0058158000f, -0.0039011000f, -0.0021295000f, -0.0005697300f, 0.0007286200f, 0.0017357000f, 0.0024405000f, 0.0028493000f, 0.0029835000f, 0.0028763000f, 0.0025697000f, 0.0021111000f, 0.0015499000f, 0.0009344900f, 0.0003097200f, -0.0002854400f, -0.0008193100f, -0.0012684000f, -0.0016177000f, -0.0018603000f, -0.0019970000f, -0.0020347000f, -0.0019854000f, -0.0018643000f, -0.0016887000f, -0.0014763000f, -0.0012439000f, -0.0010066000f, -0.0007770900f, -0.0005649500f, -0.0003769400f, -0.0002169600f, -0.0000864590f, 0.0000150330f, 0.0000893060f, 0.0001388700f, 0.0001664000f, 0.0001743100f, 0.0001644100f
        };
float32_t filtroMaxi2_Coeficientes[FILTRO_ECG_ORDEN] = //1 | 18Hz
        {
                0.0001644100f, 0.0001743100f, 0.0001664000f, 0.0001388700f, 0.0000893060f, 0.0000150330f, -0.0000864590f, -0.0002169600f, -0.0003769400f, -0.0005649500f, -0.0007770900f, -0.0010066000f, -0.0012439000f, -0.0014763000f, -0.0016887000f, -0.0018643000f, -0.0019854000f, -0.0020347000f, -0.0019970000f, -0.0018603000f, -0.0016177000f, -0.0012684000f, -0.0008193100f, -0.0002854400f, 0.0003097200f, 0.0009344900f, 0.0015499000f, 0.0021111000f, 0.0025697000f, 0.0028763000f, 0.0029835000f, 0.0028493000f, 0.0024405000f, 0.0017357000f, 0.0007286200f, -0.0005697300f, -0.0021295000f, -0.0039011000f, -0.0058158000f, -0.0077869000f, -0.0097123000f, -0.0114780000f, -0.0129640000f, -0.0140460000f, -0.0146060000f, -0.0145350000f, -0.0137410000f, -0.0121520000f, -0.0097232000f, -0.0064425000f, -0.0023294000f, 0.0025612000f, 0.0081398000f, 0.0142840000f, 0.0208430000f, 0.0276400000f, 0.0344820000f, 0.0411640000f, 0.0474800000f, 0.0532260000f, 0.0582170000f, 0.0622850000f, 0.0652940000f, 0.0671420000f, 0.0677650000f, 0.0671420000f, 0.0652940000f, 0.0622850000f, 0.0582170000f, 0.0532260000f, 0.0474800000f, 0.0411640000f, 0.0344820000f, 0.0276400000f, 0.0208430000f, 0.0142840000f, 0.0081398000f, 0.0025612000f, -0.0023294000f, -0.0064425000f, -0.0097232000f, -0.0121520000f, -0.0137410000f, -0.0145350000f, -0.0146060000f, -0.0140460000f, -0.0129640000f, -0.0114780000f, -0.0097123000f, -0.0077869000f, -0.0058158000f, -0.0039011000f, -0.0021295000f, -0.0005697300f, 0.0007286200f, 0.0017357000f, 0.0024405000f, 0.0028493000f, 0.0029835000f, 0.0028763000f, 0.0025697000f, 0.0021111000f, 0.0015499000f, 0.0009344900f, 0.0003097200f, -0.0002854400f, -0.0008193100f, -0.0012684000f, -0.0016177000f, -0.0018603000f, -0.0019970000f, -0.0020347000f, -0.0019854000f, -0.0018643000f, -0.0016887000f, -0.0014763000f, -0.0012439000f, -0.0010066000f, -0.0007770900f, -0.0005649500f, -0.0003769400f, -0.0002169600f, -0.0000864590f, 0.0000150330f, 0.0000893060f, 0.0001388700f, 0.0001664000f, 0.0001743100f, 0.0001644100f
        };
float32_t filtro60Hz1_Coeficientes[FILTRO_ECG_ORDEN] = //0 | 60Hz
        {
                -0.0003196200f, -0.0000745190f, 0.0002261000f, 0.0004285100f, 0.0004134300f, 0.0001599900f, -0.0002273000f, -0.0005509300f, -0.0006109500f, -0.0003186000f, 0.0002267100f, 0.0007530300f, 0.0009393000f, 0.0005983200f, -0.0001787000f, -0.0010153000f, -0.0014172000f, -0.0010491000f, 0.0000260060f, 0.0013030000f, 0.0020525000f, 0.0017207000f, 0.0002994600f, -0.0015650000f, -0.0028406000f, -0.0026613000f, -0.0008764400f, 0.0017335000f, 0.0037639000f, 0.0039182000f, 0.0017964000f, -0.0017217000f, -0.0047919000f, -0.0055421000f, -0.0031703000f, 0.0014188000f, 0.0058835000f, 0.0075981000f, 0.0051452000f, -0.0006772200f, -0.0069887000f, -0.0101900000f, -0.0079439000f, -0.0007202900f, 0.0080527000f, 0.0135160000f, 0.0119610000f, 0.0031440000f, -0.0090194000f, -0.0180170000f, -0.0180290000f, -0.0073632000f, 0.0098356000f, 0.0248360000f, 0.0283210000f, 0.0154570000f, -0.0104550000f, -0.0378510000f, -0.0508770000f, -0.0361100000f, 0.0108420000f, 0.0819400000f, 0.1583800000f, 0.2170000000f, 0.2389600000f, 0.2170000000f, 0.1583800000f, 0.0819400000f, 0.0108420000f, -0.0361100000f, -0.0508770000f, -0.0378510000f, -0.0104550000f, 0.0154570000f, 0.0283210000f, 0.0248360000f, 0.0098356000f, -0.0073632000f, -0.0180290000f, -0.0180170000f, -0.0090194000f, 0.0031440000f, 0.0119610000f, 0.0135160000f, 0.0080527000f, -0.0007202900f, -0.0079439000f, -0.0101900000f, -0.0069887000f, -0.0006772200f, 0.0051452000f, 0.0075981000f, 0.0058835000f, 0.0014188000f, -0.0031703000f, -0.0055421000f, -0.0047919000f, -0.0017217000f, 0.0017964000f, 0.0039182000f, 0.0037639000f, 0.0017335000f, -0.0008764400f, -0.0026613000f, -0.0028406000f, -0.0015650000f, 0.0002994600f, 0.0017207000f, 0.0020525000f, 0.0013030000f, 0.0000260060f, -0.0010491000f, -0.0014172000f, -0.0010153000f, -0.0001787000f, 0.0005983200f, 0.0009393000f, 0.0007530300f, 0.0002267100f, -0.0003186000f, -0.0006109500f, -0.0005509300f, -0.0002273000f, 0.0001599900f, 0.0004134300f, 0.0004285100f, 0.0002261000f, -0.0000745190f, -0.0003196200f
        };
float32_t filtro60Hz2_Coeficientes[FILTRO_ECG_ORDEN] = //1 | 60Hz
        {
                -0.0003196200f, -0.0000745190f, 0.0002261000f, 0.0004285100f, 0.0004134300f, 0.0001599900f, -0.0002273000f, -0.0005509300f, -0.0006109500f, -0.0003186000f, 0.0002267100f, 0.0007530300f, 0.0009393000f, 0.0005983200f, -0.0001787000f, -0.0010153000f, -0.0014172000f, -0.0010491000f, 0.0000260060f, 0.0013030000f, 0.0020525000f, 0.0017207000f, 0.0002994600f, -0.0015650000f, -0.0028406000f, -0.0026613000f, -0.0008764400f, 0.0017335000f, 0.0037639000f, 0.0039182000f, 0.0017964000f, -0.0017217000f, -0.0047919000f, -0.0055421000f, -0.0031703000f, 0.0014188000f, 0.0058835000f, 0.0075981000f, 0.0051452000f, -0.0006772200f, -0.0069887000f, -0.0101900000f, -0.0079439000f, -0.0007202900f, 0.0080527000f, 0.0135160000f, 0.0119610000f, 0.0031440000f, -0.0090194000f, -0.0180170000f, -0.0180290000f, -0.0073632000f, 0.0098356000f, 0.0248360000f, 0.0283210000f, 0.0154570000f, -0.0104550000f, -0.0378510000f, -0.0508770000f, -0.0361100000f, 0.0108420000f, 0.0819400000f, 0.1583800000f, 0.2170000000f, 0.2389600000f, 0.2170000000f, 0.1583800000f, 0.0819400000f, 0.0108420000f, -0.0361100000f, -0.0508770000f, -0.0378510000f, -0.0104550000f, 0.0154570000f, 0.0283210000f, 0.0248360000f, 0.0098356000f, -0.0073632000f, -0.0180290000f, -0.0180170000f, -0.0090194000f, 0.0031440000f, 0.0119610000f, 0.0135160000f, 0.0080527000f, -0.0007202900f, -0.0079439000f, -0.0101900000f, -0.0069887000f, -0.0006772200f, 0.0051452000f, 0.0075981000f, 0.0058835000f, 0.0014188000f, -0.0031703000f, -0.0055421000f, -0.0047919000f, -0.0017217000f, 0.0017964000f, 0.0039182000f, 0.0037639000f, 0.0017335000f, -0.0008764400f, -0.0026613000f, -0.0028406000f, -0.0015650000f, 0.0002994600f, 0.0017207000f, 0.0020525000f, 0.0013030000f, 0.0000260060f, -0.0010491000f, -0.0014172000f, -0.0010153000f, -0.0001787000f, 0.0005983200f, 0.0009393000f, 0.0007530300f, 0.0002267100f, -0.0003186000f, -0.0006109500f, -0.0005509300f, -0.0002273000f, 0.0001599900f, 0.0004134300f, 0.0004285100f, 0.0002261000f, -0.0000745190f, -0.0003196200f
        };



void tarea_GraficarECG_Setup(void)
{
    // Inicialización de los filtros ECG 1
    arm_fir_init_f32 (&filtroDiag1_Instancia, FILTRO_ECG_ORDEN, (float32_t*) &filtroDiag1_Coeficientes[0], &filtroDiag1_Estados[0], FILTRO_ECG_TAM_BLOQUE);
    arm_fir_init_f32 (&filtroMoni1_Instancia, FILTRO_ECG_ORDEN, (float32_t*) &filtroMoni1_Coeficientes[0], &filtroMoni1_Estados[0], FILTRO_ECG_TAM_BLOQUE);
    arm_fir_init_f32 (&filtroMaxi1_Instancia, FILTRO_ECG_ORDEN, (float32_t*) &filtroMaxi1_Coeficientes[0], &filtroMaxi1_Estados[0], FILTRO_ECG_TAM_BLOQUE);
    arm_fir_init_f32 (&filtro60Hz1_Instancia, FILTRO_ECG_ORDEN, (float32_t*) &filtro60Hz1_Coeficientes[0], &filtro60Hz1_Estados[0], FILTRO_ECG_TAM_BLOQUE);

    // Inicialización de los filtros ECG 2
    arm_fir_init_f32 (&filtroDiag2_Instancia, FILTRO_ECG_ORDEN, (float32_t*) &filtroDiag2_Coeficientes[0], &filtroDiag2_Estados[0], FILTRO_ECG_TAM_BLOQUE);
    arm_fir_init_f32 (&filtroMoni2_Instancia, FILTRO_ECG_ORDEN, (float32_t*) &filtroMoni2_Coeficientes[0], &filtroMoni2_Estados[0], FILTRO_ECG_TAM_BLOQUE);
    arm_fir_init_f32 (&filtroMaxi2_Instancia, FILTRO_ECG_ORDEN, (float32_t*) &filtroMaxi2_Coeficientes[0], &filtroMaxi2_Estados[0], FILTRO_ECG_TAM_BLOQUE);
    arm_fir_init_f32 (&filtro60Hz2_Instancia, FILTRO_ECG_ORDEN, (float32_t*) &filtro60Hz2_Coeficientes[0], &filtro60Hz2_Estados[0], FILTRO_ECG_TAM_BLOQUE);

    // Seleccionar un filtro por default
    derivacionesAGraficar.ecg_FiltroG1 = FILTRO_DIAGNOSTICO;
    derivacionesAGraficar.ecg_FiltroG2 = FILTRO_DIAGNOSTICO;
}
void tarea_GraficarECG_Loop(void)
{
    // Calcular el valor a graficar, primero el valor de la derivación
    switch (derivacionesAGraficar.g1)
    {
        case DERIVACION_NULL:
            g1_Derivacion1 = 0;
            break;
        case DERIVACION_I:
            g1_Derivacion1 = ads_I_f;
            break;
        case DERIVACION_II:
            g1_Derivacion1 = ads_II_f;
            break;
        case DERIVACION_III:
            g1_Derivacion1 = ads_III_f;
            break;
        case DERIVACION_AVR:
            g1_Derivacion1 = -(ads_I_f + ads_II_f) / 2;
            break;
        case DERIVACION_AVL:
            g1_Derivacion1 = (ads_I_f - ads_III_f) / 2;
            break;
        case DERIVACION_AVF:
            g1_Derivacion1 = (ads_II_f + ads_III_f) / 2;
            break;
        case DERIVACION_V1:
            g1_Derivacion1 = (leerValorCanal (8) / ADS_RESOLUTION)
            * ADS_MULT_OUT;
            break;
        case DERIVACION_V2:
            g1_Derivacion1 = (leerValorCanal (4) / ADS_RESOLUTION)
            * ADS_MULT_OUT;
            break;
        case DERIVACION_V3:
            g1_Derivacion1 = (leerValorCanal (5) / ADS_RESOLUTION)
            * ADS_MULT_OUT;
            break;
        case DERIVACION_V4:
            g1_Derivacion1 = (leerValorCanal (6) / ADS_RESOLUTION)
            * ADS_MULT_OUT;
            break;
        case DERIVACION_V5:
            g1_Derivacion1 = (leerValorCanal (7) / ADS_RESOLUTION)
            * ADS_MULT_OUT;
            break;
        case DERIVACION_V6:
            g1_Derivacion1 = (leerValorCanal (1) / ADS_RESOLUTION)
            * ADS_MULT_OUT;
            break;
        default:
            break;
    }
    //si la grafica 2 es igual a la 1, no hace falta calcularla, sólo la copio.
    if (derivacionesAGraficar.g2 == derivacionesAGraficar.g1)
        {
            g2_Derivacion2 = g1_Derivacion1;
        }
    else
        {
            switch (derivacionesAGraficar.g2)
            {
                case DERIVACION_NULL:
                    g2_Derivacion2 = 0;
                    break;
                case DERIVACION_I:
                    g2_Derivacion2 = ads_I_f;
                    break;
                case DERIVACION_II:
                    g2_Derivacion2 = ads_II_f;
                    break;
                case DERIVACION_III:
                    g2_Derivacion2 = ads_III_f;
                    break;
                case DERIVACION_AVR:
                    g2_Derivacion2 = -(ads_I_f + ads_II_f) / 2;
                    break;
                case DERIVACION_AVL:
                    g2_Derivacion2 = (ads_I_f - ads_III_f) / 2;
                    break;
                case DERIVACION_AVF:
                    g2_Derivacion2 = (ads_II_f + ads_III_f) / 2;
                    break;
                case DERIVACION_V1:
                    g2_Derivacion2 = (leerValorCanal (8) / ADS_RESOLUTION)
                    * ADS_MULT_OUT;
                    break;
                case DERIVACION_V2:
                    g2_Derivacion2 = (leerValorCanal (4) / ADS_RESOLUTION)
                    * ADS_MULT_OUT;
                    break;
                case DERIVACION_V3:
                    g2_Derivacion2 = (leerValorCanal (5) / ADS_RESOLUTION)
                    * ADS_MULT_OUT;
                    break;
                case DERIVACION_V4:
                    g2_Derivacion2 = (leerValorCanal (6) / ADS_RESOLUTION)
                    * ADS_MULT_OUT;
                    break;
                case DERIVACION_V5:
                    g2_Derivacion2 = (leerValorCanal (7) / ADS_RESOLUTION)
                    * ADS_MULT_OUT;
                    break;
                case DERIVACION_V6:
                    g2_Derivacion2 = (leerValorCanal (1) / ADS_RESOLUTION)
                    * ADS_MULT_OUT;
                    break;
                default:
                    break;
            }
        }
    // Acá se tiene el primer valor de las derivaciones a graficar
    // Ahora se deben de filtrar en caso de ser necesario
    // Retraso máximo: FILTRO_RESP_ORDEN 128 [0.64seg]
    //Selección del filtro a utilizar para ECG 1:
    if (derivacionesAGraficar.ecg_FiltroG1 == FILTRO_NULL)
        {

            //arm_fir_f32 (&filtro60Hz1_Instancia, &g1_Derivacion1, &graph1, FILTRO_ECG_TAM_BLOQUE);
            graph1 = g1_Derivacion1;

        }
    else if (derivacionesAGraficar.ecg_FiltroG1 == FILTRO_DIAGNOSTICO)
        {
            arm_fir_f32 (&filtroDiag1_Instancia, // Instancia de filtro
                         &g1_Derivacion1,        // Dato de entrada
                         &graph1,                // Dato de salida
                         FILTRO_ECG_TAM_BLOQUE); // Tamaño de bloque
        }
    else if (derivacionesAGraficar.ecg_FiltroG1 == FILTRO_MONITOR)
        {
            arm_fir_f32 (&filtroMoni1_Instancia, &g1_Derivacion1, &graph1, FILTRO_ECG_TAM_BLOQUE);
        }
    else if (derivacionesAGraficar.ecg_FiltroG1 == FILTRO_MAXIMO)
        {
            arm_fir_f32 (&filtroMaxi1_Instancia, &g1_Derivacion1, &graph1, FILTRO_ECG_TAM_BLOQUE);
        }
    //Selección del filtro a utilizar para ECG 2:
    if (derivacionesAGraficar.ecg_FiltroG2 == FILTRO_NULL)
        {
            //arm_fir_f32 (&filtro60Hz2_Instancia, &g2_Derivacion2, &graph2, FILTRO_ECG_TAM_BLOQUE);
            graph2 = g2_Derivacion2;

        }
    else if (derivacionesAGraficar.ecg_FiltroG2 == FILTRO_DIAGNOSTICO)
        {
            arm_fir_f32 (&filtroDiag2_Instancia, &g2_Derivacion2, &graph2, FILTRO_ECG_TAM_BLOQUE);
        }
    else if (derivacionesAGraficar.ecg_FiltroG2 == FILTRO_MONITOR)
        {
            arm_fir_f32 (&filtroMoni2_Instancia, &g2_Derivacion2, &graph2, FILTRO_ECG_TAM_BLOQUE);
        }
    else if (derivacionesAGraficar.ecg_FiltroG2 == FILTRO_MAXIMO)
        {
            arm_fir_f32 (&filtroMaxi2_Instancia, &g2_Derivacion2, &graph2, FILTRO_ECG_TAM_BLOQUE);
        }
    // Muestreo original 500 sps, omitir 1 muestra para lograr un envío de 250 sps
    if (!omitirMuestra)
        {
            omitirMuestra = true;
            xQueueSend(ecgGraph1Handle,&graph1, 0);
            xQueueSend(ecgGraph2Handle,&graph2, 0);
        }
    else
        {
            omitirMuestra = false;
        }
}

